{"version":3,"sources":["components/MemoryCard.jsx","components/Modal.jsx","components/useModal.jsx","helpers/shuffle.js","components/GameBoard.jsx","images/images.js","images/marguerite.jpg","images/pink-rose.jpg","images/daffodil.jpg","images/daisy.jpg","images/marigold.jpg","images/sunflower.jpg","images/tulip.jpg","images/gerbera.jpg","images/water-lily.jpg","images/forget-me-not.jpg","images/jasmine.jpg","images/alstroemeria.jpg","images/dahlia.jpg","images/chrysanthemum.jpg","images/buttercup.jpg","images/azalea.jpg","images/aster.jpg","images/poppy.jpg","components/SettingsInputs.jsx","components/ScoreBoard.jsx","components/Header.jsx","helpers/getRandomElements.js","App.jsx","index.jsx"],"names":["MemoryCard","data","props","index","useState","isClicked","setIsClicked","timeout","delay","Promise","res","setTimeout","handleClick","name","a","useEffect","timer","clearTimeout","className","onClick","isGrayscale","width","height","src","alt","showNames","Modal","isShowing","hide","ReactDOM","createPortal","Fragment","size","document","body","useModal","customCloseHandler","setIsShowing","shuffle","array","newArray","i","length","j","Math","floor","random","GameBoard","currentImages","imagesData","setImagesData","resetGame","isShowingModal","show","wrongClick","setWrongClick","resetScore","resetAllClicks","flowerName","wasClicked","setCurrentScore","setWasClickedTrue","prevScore","didPlayerWin","every","image","updatedData","map","find","images","DifficultyPicker","imageCount","setImageCount","onChange","e","target","value","type","id","min","max","htmlFor","setShowNames","checked","setIsGrayscale","ScoreBoard","score","currentScore","maxScore","Header","getRandomElements","n","Error","slice","App","setMaxScore","setCurrentImages","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0802f933.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport '../styles/memoryCard.css'\n\nexport default function MemoryCard({ data, index, ...props }) {\n  const [isClicked, setIsClicked] = useState(false);\n\n  function timeout(delay) {\n    return new Promise(res => setTimeout(res, delay));\n  }\n\n  const handleClick = async (name) => {\n    setIsClicked(true);\n    await timeout(100)\n    props.handleClick(data.name);\n  }\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsClicked(false)\n    }, 100)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [isClicked])\n\n  return (\n    <div className={`memory-card ${isClicked ? 'clicked' : ''}`} onClick={() => handleClick(data.name)}>\n      <img className={props.isGrayscale ? \"grayscale\" : null} width=\"180\" height=\"240\" src={data.src} alt={data.name} />\n      {props.showNames && <p>{data.name}</p>}\n    </div>\n  )\n}","import '../styles/modal.css'\nimport { IoClose } from \"react-icons/io5\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Modal = ({isShowing, hide}) => isShowing ? ReactDOM.createPortal(\n  <React.Fragment>\n    <div className=\"modal-wrapper\">\n      <div className=\"modal\">\n        <h1>You won! You've remembered all the images.</h1>\n        <IoClose onClick={hide} size=\"2em\"/>\n      </div>\n    </div>\n    </React.Fragment>, document.body\n) : null;\n\nexport default Modal;","import { useState } from 'react';\n\nconst useModal = (customCloseHandler) => {\n  const [isShowing, setIsShowing] = useState(false);\n\n  function show() {\n    setIsShowing(true);\n  }\n\n  function hide() {\n    setIsShowing(false);\n    customCloseHandler();\n  }\n\n  return [\n    isShowing,\n    show,\n    hide\n  ]\n};\n\nexport default useModal;\n","  // fisher/yates shuffle algorithm\n  export default function shuffle(array) {\n    const newArray = [...array]\n    for (let i = newArray.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n    }\n    return newArray\n  }","import MemoryCard from \"./MemoryCard\";\nimport '../styles/gameBoard.css'\nimport { useEffect, useState } from \"react\";\nimport Modal from \"./Modal\";\nimport useModal from \"./useModal\";\nimport shuffle from \"../helpers/shuffle\";\n\nexport default function GameBoard(props) {\n  const [imagesData, setImagesData] = useState(shuffle(props.currentImages))\n  const [isShowingModal, show, hide] = useModal(resetGame);\n  const [wrongClick, setWrongClick] = useState(false);\n\n  useEffect(() => {\n    resetGame()\n    setImagesData(shuffle(props.currentImages))\n  }, [props.currentImages])\n\n  useEffect(() => setTimeout(() => setWrongClick(false), 500), [wrongClick])\n\n  function resetGame() {\n    props.resetScore()\n    resetAllClicks();\n  }\n\n  const handleClick = (flowerName) => {\n    if (wasClicked(flowerName)) {\n      setWrongClick(true);\n      resetAllClicks()\n      props.setCurrentScore(0);\n    } else {\n      setWasClickedTrue(flowerName)\n      props.setCurrentScore((prevScore) => prevScore + 1)\n    }\n  }\n\n  useEffect(() => {\n    if (didPlayerWin()) {\n      show()\n    }\n  }, [imagesData])\n\n  const didPlayerWin = () => {\n    const didWin = imagesData.every((image) => image.wasClicked)\n    return didWin\n  }\n\n  // returns an updated imagesData with wasClicked set for correct flower\n  const setWasClickedTrue = (flowerName) => {\n    const updatedData = imagesData.map((image) => {\n      if (image.name === flowerName) {\n        return (\n          {\n            ...image,\n            wasClicked: true\n          }\n        )\n      }\n      return image\n    })\n    setImagesData(shuffle(updatedData))\n  }\n\n  const wasClicked = (flowerName) => {\n    const data = (imagesData.find((image) => (image.name === flowerName)))\n    return !!data.wasClicked\n  }\n\n  const resetAllClicks = () => {\n    const updatedData = imagesData.map((image) => {\n      return ({\n        ...image,\n        wasClicked: false,\n      })\n    })\n    setImagesData(shuffle(updatedData));\n  }\n\n  return (\n    <div className={`gameboard-wrapper ${wrongClick ? \"danger\" : \"\"}`}>\n      <Modal isShowing={isShowingModal} hide={hide} />\n      <div className=\"gameboard\">\n        {imagesData.map((image, index) => {\n          return (\n            <MemoryCard\n              key={image.name}\n              data={image}\n              handleClick={handleClick}\n              showNames={props.showNames}\n              isGrayscale={props.isGrayscale}\n            />\n          )\n        }\n        )}\n      </div>\n    </div>\n  )\n}","import marguerite from './marguerite.jpg';\nimport rose from './pink-rose.jpg';\nimport daffodil from './daffodil.jpg';\nimport daisy from './daisy.jpg';\nimport marigold from './marigold.jpg';\nimport sunflower from './sunflower.jpg';\nimport tulip from './tulip.jpg';\nimport gerbera from './gerbera.jpg';\nimport waterLily from './water-lily.jpg';\nimport forgetMeNot from './forget-me-not.jpg';\nimport jasmine from './jasmine.jpg';\nimport alstroemeria from './alstroemeria.jpg';\nimport dahlia from './dahlia.jpg';\nimport chrysanthemum from './chrysanthemum.jpg';\nimport buttercup from './buttercup.jpg';\nimport azalea from './azalea.jpg';\nimport aster from './aster.jpg';\nimport poppy from './poppy.jpg';\n\nconst images = [\n  { src: marguerite, name: 'marguerite' },\n  { src: rose, name: 'rose' },\n  { src: daffodil, name: 'daffodil' },\n  { src: daisy, name: 'daisy' },\n  { src: marigold, name: 'marigold' },\n  { src: sunflower, name: 'sunflower' },\n  { src: tulip, name: 'tulip' },\n  { src: gerbera, name: 'gerbera' },\n  { src: waterLily, name: 'water lily' },\n  { src: forgetMeNot, name: 'forget me not' },\n  { src: jasmine, name: 'jasmine' },\n  { src: alstroemeria, name: 'alstroemeria' },\n  { src: dahlia, name: 'dahlia' },\n  { src: chrysanthemum, name: 'chrysanthemum' },\n  { src: buttercup, name: 'buttercup' },\n  { src: azalea, name: 'azalea' },\n  { src: aster, name: 'aster' },\n  { src: poppy, name: 'poppy' },\n]\n\nexport default images;","export default __webpack_public_path__ + \"static/media/marguerite.c40d09b9.jpg\";","export default __webpack_public_path__ + \"static/media/pink-rose.1cf453da.jpg\";","export default __webpack_public_path__ + \"static/media/daffodil.36068a9d.jpg\";","export default __webpack_public_path__ + \"static/media/daisy.ceab110f.jpg\";","export default __webpack_public_path__ + \"static/media/marigold.dad571d4.jpg\";","export default __webpack_public_path__ + \"static/media/sunflower.a4c5e57d.jpg\";","export default __webpack_public_path__ + \"static/media/tulip.2cdb520f.jpg\";","export default __webpack_public_path__ + \"static/media/gerbera.fc604790.jpg\";","export default __webpack_public_path__ + \"static/media/water-lily.1ddfeb73.jpg\";","export default __webpack_public_path__ + \"static/media/forget-me-not.8485c5ec.jpg\";","export default __webpack_public_path__ + \"static/media/jasmine.22bbb7fe.jpg\";","export default __webpack_public_path__ + \"static/media/alstroemeria.1f03efb2.jpg\";","export default __webpack_public_path__ + \"static/media/dahlia.e2957cf6.jpg\";","export default __webpack_public_path__ + \"static/media/chrysanthemum.c0738adb.jpg\";","export default __webpack_public_path__ + \"static/media/buttercup.f7e567a2.jpg\";","export default __webpack_public_path__ + \"static/media/azalea.b38a261b.jpg\";","export default __webpack_public_path__ + \"static/media/aster.721e86ea.jpg\";","export default __webpack_public_path__ + \"static/media/poppy.342b20ac.jpg\";","import { useState } from \"react\";\nimport images from \"../images/images\";\nimport '../styles/settingsInput.css';\n\nexport default function DifficultyPicker(props) {\n  const [imageCount, setImageCount] = useState(8)\n\n  const handleDifficultyChange = (e) => {\n    setImageCount(e.target.value)\n    props.setImageCount(e.target.value)\n  }\n\n  const handleShowNamesChange = (e) => {\n    props.setShowNames(e.target.checked)\n  }\n\n  return (\n    <div className=\"settings-picker\">\n      <div className=\"part\">\n        <span className=\"heading\">Difficulty</span>\n        <input\n          onChange={handleDifficultyChange}\n          type=\"range\"\n          id=\"count\"\n          name=\"count\"\n          min={4}\n          max={images.length}\n          value={imageCount}\n        />\n        <label htmlFor=\"count\">{imageCount} images</label>\n\n      </div>\n      <div className=\"part checkboxes\">\n        <div className=\"checkbox-input\">\n          <label htmlFor=\"showNames\">Show flower names</label>\n          <input\n            type=\"checkbox\"\n            name=\"showNames\"\n            onChange={handleShowNamesChange}\n            checked={props.showNames}\n          />\n        </div>\n\n        <div className=\"checkbox-input\">\n          <label htmlFor=\"grayscale\">Grayscale images</label>\n          <input\n            type=\"checkbox\"\n            name=\"grayscale\"\n            onChange={(e) => props.setIsGrayscale(e.target.checked)}\n            checked={props.isGrayscale}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}","import '../styles/scoreboard.css';\n\nexport default function ScoreBoard({ score, ...props }) {\n  return (\n    <div className=\"scoreboard\">\n      <span>Current score: {score.currentScore}</span>\n      <span>Max score: {score.maxScore}</span>\n    </div>\n  )\n}","import '../styles/header.css'\nimport SettingsInputs from './SettingsInputs'\nimport ScoreBoard from './ScoreBoard'\n\nexport default function Header(props) {\n  return (\n    <header>\n      <SettingsInputs\n        setImageCount={props.setImageCount}\n        setShowNames={props.setShowNames}\n        showNames={props.showNames}\n        setIsGrayscale={props.setIsGrayscale}\n        isGrayscale={props.isGrayscale}\n      />\n      <div>\n        <h1>Flower Memory Game</h1>\n        <p>Click on all images but don't click on the same image twice!</p>\n      </div>\n      <ScoreBoard score={props.score} />\n    </header>\n  )\n}","import shuffle from \"./shuffle\";\n\nexport default function getRandomElements(array, n) {\n  if (n > array.length) {\n    throw new Error('Number of requested random elements is higher than number of elements in the array')\n  }\n  const newArray = shuffle(array)\n  return newArray.slice(0, n);\n}","import GameBoard from './components/GameBoard';\nimport { Fragment } from 'react/cjs/react.production.min';\nimport Header from './components/Header';\nimport React, { useEffect, useState } from 'react';\nimport getRandomElements from './helpers/getRandomElements';\nimport images from './images/images';\n\nfunction App() {\n  const [currentScore, setCurrentScore] = useState(0);\n  const [maxScore, setMaxScore] = useState(0);\n  const [imageCount, setImageCount] = useState(8);\n  const [currentImages, setCurrentImages] = useState(getRandomElements(images, 8));\n  const [showNames, setShowNames] = useState(true);\n  const [isGrayscale, setIsGrayscale] = useState(false);\n\n  useEffect(() => {\n    setCurrentImages(getRandomElements(images, imageCount))\n  }, [imageCount])\n\n  const resetScore = () => {\n    setMaxScore(0);\n    setCurrentScore(0);\n  }\n\n  useEffect(() => {\n    if (currentScore > maxScore) {\n      setMaxScore(currentScore)\n    }\n  }, [currentScore])\n\n  return (\n    <Fragment>\n      <Header \n        score={{ maxScore, currentScore }}\n        setImageCount={setImageCount} \n        setShowNames={setShowNames}\n        showNames={showNames}\n        setIsGrayscale={setIsGrayscale}\n      />\n      <GameBoard\n        setCurrentScore={setCurrentScore}\n        resetScore={resetScore}\n        currentImages={currentImages}\n        showNames={showNames} \n        isGrayscale={isGrayscale}\n      />\n    </Fragment>\n  );\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}